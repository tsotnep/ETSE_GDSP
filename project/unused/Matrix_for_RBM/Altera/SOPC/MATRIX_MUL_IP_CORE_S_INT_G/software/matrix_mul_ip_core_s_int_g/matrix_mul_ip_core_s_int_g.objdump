
matrix_mul_ip_core_s_int_g.elf:     file format elf32-littlenios2
matrix_mul_ip_core_s_int_g.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000748 memsz 0x00000748 flags r-x
    LOAD off    0x00001768 vaddr 0x00002768 paddr 0x00002784 align 2**12
         filesz 0x0000001c memsz 0x0000001c flags rw-
    LOAD off    0x000017a0 vaddr 0x000027a0 paddr 0x000027a0 align 2**12
         filesz 0x00000000 memsz 0x000000a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000072c  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0000274c  0000274c  0000174c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       0000001c  00002768  00002784  00001768  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000000a0  000027a0  000027a0  000017a0  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001c8  00000000  00000000  000017b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000002cb  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001114  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000888  00000000  00000000  00002d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001b24  00000000  00000000  000035df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000027c  00000000  00000000  00005104  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000736  00000000  00000000  00005380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000592  00000000  00000000  00005ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00006048  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00006058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00006fe9  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00006fec  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00006ff8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00006ff9  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00006ffa  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00007005  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000014  00000000  00000000  0000701b  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000058  00000000  00000000  0000702f  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002a4e2  00000000  00000000  00007087  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
0000274c l    d  .rodata	00000000 .rodata
00002768 l    d  .rwdata	00000000 .rwdata
000027a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
000027b4 l     O .bss	0000000a str.1410
00000000 l    df *ABS*	00000000 matrix_mul_ip_core_s_int_g.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002314 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00002498 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00002524 g     F .text	0000002c alt_main
00002784 g       *ABS*	00000000 __flash_rwdata_start
00002060 g     F .text	000000ac numToChar
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
000027ac g     O .bss	00000004 alt_argv
0000a768 g       *ABS*	00000000 _gp
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002450 g     F .text	00000008 __udivsi3
00002768 g     O .rwdata	00000004 temp
00002308 g     F .text	0000000c selfTest
00002840 g       *ABS*	00000000 __bss_end
000027c0 g     O .bss	00000040 DOUT
0000273c g     F .text	00000004 alt_dcache_flush_all
00002784 g       *ABS*	00000000 __ram_rwdata_end
00002768 g       *ABS*	00000000 __ram_rodata_end
00002780 g     O .rwdata	00000004 jtag_uart_0
00002458 g     F .text	00000008 __umodsi3
00002840 g       *ABS*	00000000 end
00003000 g       *ABS*	00000000 __alt_stack_pointer
00002708 g     F .text	00000034 altera_avalon_jtag_uart_write
00002550 g     F .text	00000144 alt_printf
00002020 g     F .text	0000003c _start
000026e4 g     F .text	00000004 alt_sys_init
00002460 g     F .text	00000038 __mulsi3
00002768 g       *ABS*	00000000 __ram_rwdata_start
0000274c g       *ABS*	00000000 __ram_rodata_start
00002774 g     O .rwdata	00000004 r_STATUS
0000277c g     O .rwdata	00000004 r_DOUT
00002840 g       *ABS*	00000000 __alt_stack_base
000027a0 g       *ABS*	00000000 __bss_start
0000210c g     F .text	000001fc main
000027b0 g     O .bss	00000004 alt_envp
0000276c g     O .rwdata	00000004 IP_CORE
00002390 g     F .text	00000060 __divsi3
0000274c g       *ABS*	00000000 __flash_rodata_start
00002778 g     O .rwdata	00000004 r_DIN
0000205c g     F .text	00000004 delay
000026e8 g     F .text	00000020 alt_irq_init
00002800 g     O .bss	00000040 DIN
000027a8 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002784 g       *ABS*	00000000 _edata
00002840 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00002744 g     F .text	00000008 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
000023f0 g     F .text	00000060 __modsi3
00003000 g       *ABS*	00000000 __alt_data_end
00002770 g     O .rwdata	00000004 r_CONFIG
0000200c g       .entry	00000000 _exit
00002694 g     F .text	00000050 alt_putchar
00002740 g     F .text	00000004 alt_icache_flush_all
000027a0 g     O .bss	00000004 status
000027a4 g     O .bss	00000004 config
000024b8 g     F .text	0000006c alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	decc0014 	ori	sp,sp,12288

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a9da14 	ori	gp,gp,42856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	1089e814 	ori	r2,r2,10144

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18ca1014 	ori	r3,r3,10304

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00024b80 	call	24b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00025240 	call	2524 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <alt_after_alt_main>

0000205c <delay>:

void delay(int cycles)
{
	int i = 0;
	for (i=0;i<cycles;i++);
}
    205c:	f800283a 	ret

00002060 <numToChar>:

char * numToChar(int anInteger)
{
    2060:	defffb04 	addi	sp,sp,-20
    2064:	dc000015 	stw	r16,0(sp)
    2068:	dfc00415 	stw	ra,16(sp)
    206c:	dcc00315 	stw	r19,12(sp)
    2070:	dc800215 	stw	r18,8(sp)
    2074:	dc400115 	stw	r17,4(sp)
    2078:	2021883a 	mov	r16,r4
	int flag = 0;
		static char str[10] = { 0 };
		    //char str[10] = { 0 }; // large enough for an int even on 64-bit
		    int i = 8;
		    if (anInteger < 0) {
    207c:	20000316 	blt	r4,zero,208c <numToChar+0x2c>
    2080:	0027883a 	mov	r19,zero
    2084:	04400204 	movi	r17,8
    2088:	00000b06 	br	20b8 <numToChar+0x58>
		        flag = 1;
		        anInteger = -anInteger;
    208c:	0121c83a 	sub	r16,zero,r4
    2090:	04c00044 	movi	r19,1
    2094:	003ffb06 	br	2084 <numToChar+0x24>
		    }

		    while (anInteger != 0) {
		        str[i--] = (anInteger % 10) + '0';
    2098:	00023f00 	call	23f0 <__modsi3>
    209c:	10800c04 	addi	r2,r2,48
		        anInteger /= 10;
    20a0:	8009883a 	mov	r4,r16
    20a4:	01400284 	movi	r5,10
		        flag = 1;
		        anInteger = -anInteger;
		    }

		    while (anInteger != 0) {
		        str[i--] = (anInteger % 10) + '0';
    20a8:	90800005 	stb	r2,0(r18)
		        anInteger /= 10;
    20ac:	00023900 	call	2390 <__divsi3>
		        flag = 1;
		        anInteger = -anInteger;
		    }

		    while (anInteger != 0) {
		        str[i--] = (anInteger % 10) + '0';
    20b0:	8c7fffc4 	addi	r17,r17,-1
		        anInteger /= 10;
    20b4:	1021883a 	mov	r16,r2
		        flag = 1;
		        anInteger = -anInteger;
		    }

		    while (anInteger != 0) {
		        str[i--] = (anInteger % 10) + '0';
    20b8:	00800034 	movhi	r2,0
    20bc:	1089ed04 	addi	r2,r2,10164
    20c0:	8009883a 	mov	r4,r16
    20c4:	01400284 	movi	r5,10
    20c8:	88a5883a 	add	r18,r17,r2
		    if (anInteger < 0) {
		        flag = 1;
		        anInteger = -anInteger;
		    }

		    while (anInteger != 0) {
    20cc:	803ff21e 	bne	r16,zero,2098 <numToChar+0x38>
		        str[i--] = (anInteger % 10) + '0';
		        anInteger /= 10;
		    }

		    if (flag) str[i--] = '-';
    20d0:	9805003a 	cmpeq	r2,r19,zero
    20d4:	1000031e 	bne	r2,zero,20e4 <numToChar+0x84>
    20d8:	00c00b44 	movi	r3,45
    20dc:	90c00005 	stb	r3,0(r18)
    20e0:	8c7fffc4 	addi	r17,r17,-1

		    return (str + i + 1);
}
    20e4:	00800034 	movhi	r2,0
    20e8:	1089ed44 	addi	r2,r2,10165
    20ec:	8885883a 	add	r2,r17,r2
    20f0:	dfc00417 	ldw	ra,16(sp)
    20f4:	dcc00317 	ldw	r19,12(sp)
    20f8:	dc800217 	ldw	r18,8(sp)
    20fc:	dc400117 	ldw	r17,4(sp)
    2100:	dc000017 	ldw	r16,0(sp)
    2104:	dec00504 	addi	sp,sp,20
    2108:	f800283a 	ret

0000210c <main>:
char * numToChar(int num);



int main()
{
    210c:	defffc04 	addi	sp,sp,-16

	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,0);// Inititialize IP core
    2110:	0007883a 	mov	r3,zero
char * numToChar(int num);



int main()
{
    2114:	dfc00315 	stw	ra,12(sp)
    2118:	dc800215 	stw	r18,8(sp)
    211c:	dc400115 	stw	r17,4(sp)
    2120:	dc000015 	stw	r16,0(sp)

	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,0);// Inititialize IP core
    2124:	18000035 	stwio	zero,0(r3)
	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,1);// load GRAM command
    2128:	00800044 	movi	r2,1
    212c:	18800035 	stwio	r2,0(r3)
    2130:	01000204 	movi	r4,8
    2134:	00c01944 	movi	r3,101

	int i;

	for(i=1; i<=100; i++)
	{
		IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,8,i);
    2138:	20800035 	stwio	r2,0(r4)
	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,1);// load GRAM command


	int i;

	for(i=1; i<=100; i++)
    213c:	10800044 	addi	r2,r2,1
    2140:	10fffd1e 	bne	r2,r3,2138 <main+0x2c>
    2144:	00c00104 	movi	r3,4
	{
		IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,8,i);
	}

	while((IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,4) & 4) != 4); // wait for GRAM to finish loading
    2148:	18800037 	ldwio	r2,0(r3)
    214c:	1080010c 	andi	r2,r2,4
    2150:	103ffd26 	beq	r2,zero,2148 <main+0x3c>

	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,0);
    2154:	0007883a 	mov	r3,zero
    2158:	18000035 	stwio	zero,0(r3)
	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,2);
    215c:	00800084 	movi	r2,2
    2160:	18800035 	stwio	r2,0(r3)

	alt_printf("DIN:");
    2164:	01000034 	movhi	r4,0
    2168:	2109d304 	addi	r4,r4,10060
    216c:	00025500 	call	2550 <alt_printf>
    2170:	04000044 	movi	r16,1
    2174:	04400034 	movhi	r17,0
    2178:	8c4a0004 	addi	r17,r17,10240
	for(i=1; i<=100; i++)
	{
		IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,8,i);
    217c:	00800204 	movi	r2,8
    2180:	14000035 	stwio	r16,0(r2)
		DIN[i-1] = IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,8);
    2184:	10800037 	ldwio	r2,0(r2)
		alt_printf("%s,", numToChar(DIN[i-1]));
    2188:	1009883a 	mov	r4,r2

	alt_printf("DIN:");
	for(i=1; i<=100; i++)
	{
		IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,8,i);
		DIN[i-1] = IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,8);
    218c:	88800015 	stw	r2,0(r17)
		alt_printf("%s,", numToChar(DIN[i-1]));
    2190:	00020600 	call	2060 <numToChar>
    2194:	100b883a 	mov	r5,r2
    2198:	01000034 	movhi	r4,0
    219c:	2109d504 	addi	r4,r4,10068
    21a0:	00025500 	call	2550 <alt_printf>

	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,0);
	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,2);

	alt_printf("DIN:");
	for(i=1; i<=100; i++)
    21a4:	84000044 	addi	r16,r16,1
    21a8:	00801944 	movi	r2,101
    21ac:	8c400104 	addi	r17,r17,4
    21b0:	80bff21e 	bne	r16,r2,217c <main+0x70>
    21b4:	00c00104 	movi	r3,4
		DIN[i-1] = IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,8);
		alt_printf("%s,", numToChar(DIN[i-1]));
	}


	while((IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,4) & 4) != 4); // wait for BRAM to finish loading
    21b8:	18800037 	ldwio	r2,0(r3)
    21bc:	1080010c 	andi	r2,r2,4
    21c0:	103ffd26 	beq	r2,zero,21b8 <main+0xac>

	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,0);
    21c4:	0007883a 	mov	r3,zero
    21c8:	18000035 	stwio	zero,0(r3)
	//delay(10);
	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,12);// P * G
    21cc:	00800304 	movi	r2,12
    21d0:	18800035 	stwio	r2,0(r3)
    21d4:	00c00104 	movi	r3,4

	while((IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,4) & 8) != 8); // wait for operation to complete
    21d8:	18800037 	ldwio	r2,0(r3)
    21dc:	1080020c 	andi	r2,r2,8
    21e0:	103ffd26 	beq	r2,zero,21d8 <main+0xcc>

	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,0);
    21e4:	0021883a 	mov	r16,zero
    21e8:	80000035 	stwio	zero,0(r16)
	alt_printf("\n");
    21ec:	01000034 	movhi	r4,0
    21f0:	2109d604 	addi	r4,r4,10072
    21f4:	00025500 	call	2550 <alt_printf>
	IOWR_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,0,3);
    21f8:	008000c4 	movi	r2,3
    21fc:	80800035 	stwio	r2,0(r16)
	alt_printf("DOUT:\n");
    2200:	01000034 	movhi	r4,0
    2204:	2109d704 	addi	r4,r4,10076
    2208:	00025500 	call	2550 <alt_printf>
    220c:	0023883a 	mov	r17,zero
    2210:	000b883a 	mov	r5,zero
    2214:	0025883a 	mov	r18,zero
	char j=0;
	char offset=0;
	for(i=0; i<=100; i++)
		{

			if (i == 0)
    2218:	8800031e 	bne	r17,zero,2228 <main+0x11c>
				{IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,12);}
    221c:	00800304 	movi	r2,12
    2220:	10800037 	ldwio	r2,0(r2)
    2224:	04400044 	movi	r17,1
			else
			{
				while((IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,4) & 32) != 32); //wait until data is ready
    2228:	00800104 	movi	r2,4
    222c:	10800037 	ldwio	r2,0(r2)
    2230:	1080080c 	andi	r2,r2,32
    2234:	103ffc26 	beq	r2,zero,2228 <main+0x11c>

				DOUT[i-1] = IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,12);
    2238:	00800304 	movi	r2,12
    223c:	11000037 	ldwio	r4,0(r2)
    2240:	00c00034 	movhi	r3,0
    2244:	18c9f004 	addi	r3,r3,10176
    2248:	8c45883a 	add	r2,r17,r17
    224c:	1085883a 	add	r2,r2,r2
    2250:	10c5883a 	add	r2,r2,r3
					if(cnt == 9)
    2254:	28c03fcc 	andi	r3,r5,255
    2258:	18c0201c 	xori	r3,r3,128
				{IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,12);}
			else
			{
				while((IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,4) & 32) != 32); //wait until data is ready

				DOUT[i-1] = IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,12);
    225c:	113fff15 	stw	r4,-4(r2)
					if(cnt == 9)
    2260:	18ffe004 	addi	r3,r3,-128
    2264:	00800244 	movi	r2,9
    2268:	1880191e 	bne	r3,r2,22d0 <main+0x1c4>
    226c:	0021883a 	mov	r16,zero
						{cnt = 0;
							for(j=9;j>=0;j--)
							{
								alt_printf("%s,", numToChar(DOUT[j+offset]));
    2270:	90803fcc 	andi	r2,r18,255
    2274:	1080201c 	xori	r2,r2,128
    2278:	10bfe004 	addi	r2,r2,-128
    227c:	1405c83a 	sub	r2,r2,r16
    2280:	1085883a 	add	r2,r2,r2
    2284:	00c00034 	movhi	r3,0
    2288:	18c9f004 	addi	r3,r3,10176
    228c:	1085883a 	add	r2,r2,r2
    2290:	10c5883a 	add	r2,r2,r3
    2294:	11000917 	ldw	r4,36(r2)
    2298:	84000044 	addi	r16,r16,1
    229c:	00020600 	call	2060 <numToChar>
    22a0:	100b883a 	mov	r5,r2
    22a4:	01000034 	movhi	r4,0
    22a8:	2109d504 	addi	r4,r4,10068
    22ac:	00025500 	call	2550 <alt_printf>
				while((IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,4) & 32) != 32); //wait until data is ready

				DOUT[i-1] = IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE,12);
					if(cnt == 9)
						{cnt = 0;
							for(j=9;j>=0;j--)
    22b0:	00800284 	movi	r2,10
    22b4:	80bfee1e 	bne	r16,r2,2270 <main+0x164>
							{
								alt_printf("%s,", numToChar(DOUT[j+offset]));
							}
							alt_printf("\n\r");
    22b8:	01000034 	movhi	r4,0
    22bc:	2109d904 	addi	r4,r4,10084
    22c0:	00025500 	call	2550 <alt_printf>
							offset = offset + 10;
    22c4:	84a5883a 	add	r18,r16,r18
    22c8:	000b883a 	mov	r5,zero
    22cc:	00000106 	br	22d4 <main+0x1c8>
						}
					else
						cnt++;
    22d0:	29400044 	addi	r5,r5,1


	char cnt = 0;
	char j=0;
	char offset=0;
	for(i=0; i<=100; i++)
    22d4:	8c400044 	addi	r17,r17,1
    22d8:	00801904 	movi	r2,100
    22dc:	147fce0e 	bge	r2,r17,2218 <main+0x10c>
			}
			//delay(10);
		}


	alt_printf("\n");
    22e0:	01000034 	movhi	r4,0
    22e4:	2109d604 	addi	r4,r4,10072
    22e8:	00025500 	call	2550 <alt_printf>
	return 0;
}
    22ec:	0005883a 	mov	r2,zero
    22f0:	dfc00317 	ldw	ra,12(sp)
    22f4:	dc800217 	ldw	r18,8(sp)
    22f8:	dc400117 	ldw	r17,4(sp)
    22fc:	dc000017 	ldw	r16,0(sp)
    2300:	dec00404 	addi	sp,sp,16
    2304:	f800283a 	ret

00002308 <selfTest>:
//
//	int t = *r_STATUS & 0xffffffff;
	int t = IORD_32DIRECT(MATRIX_MUL_IP_S_INT_0_BASE, 0);
	return t;

}
    2308:	0005883a 	mov	r2,zero
    230c:	10800037 	ldwio	r2,0(r2)
    2310:	f800283a 	ret

00002314 <udivmodsi4>:
    2314:	29001b2e 	bgeu	r5,r4,2384 <udivmodsi4+0x70>
    2318:	28001a16 	blt	r5,zero,2384 <udivmodsi4+0x70>
    231c:	00800044 	movi	r2,1
    2320:	0007883a 	mov	r3,zero
    2324:	01c007c4 	movi	r7,31
    2328:	00000306 	br	2338 <udivmodsi4+0x24>
    232c:	19c01326 	beq	r3,r7,237c <udivmodsi4+0x68>
    2330:	18c00044 	addi	r3,r3,1
    2334:	28000416 	blt	r5,zero,2348 <udivmodsi4+0x34>
    2338:	294b883a 	add	r5,r5,r5
    233c:	1085883a 	add	r2,r2,r2
    2340:	293ffa36 	bltu	r5,r4,232c <udivmodsi4+0x18>
    2344:	10000d26 	beq	r2,zero,237c <udivmodsi4+0x68>
    2348:	0007883a 	mov	r3,zero
    234c:	21400236 	bltu	r4,r5,2358 <udivmodsi4+0x44>
    2350:	2149c83a 	sub	r4,r4,r5
    2354:	1886b03a 	or	r3,r3,r2
    2358:	1004d07a 	srli	r2,r2,1
    235c:	280ad07a 	srli	r5,r5,1
    2360:	103ffa1e 	bne	r2,zero,234c <udivmodsi4+0x38>
    2364:	30000226 	beq	r6,zero,2370 <udivmodsi4+0x5c>
    2368:	2005883a 	mov	r2,r4
    236c:	f800283a 	ret
    2370:	1809883a 	mov	r4,r3
    2374:	2005883a 	mov	r2,r4
    2378:	f800283a 	ret
    237c:	0007883a 	mov	r3,zero
    2380:	003ff806 	br	2364 <udivmodsi4+0x50>
    2384:	00800044 	movi	r2,1
    2388:	0007883a 	mov	r3,zero
    238c:	003fef06 	br	234c <udivmodsi4+0x38>

00002390 <__divsi3>:
    2390:	defffe04 	addi	sp,sp,-8
    2394:	dc000015 	stw	r16,0(sp)
    2398:	dfc00115 	stw	ra,4(sp)
    239c:	0021883a 	mov	r16,zero
    23a0:	20000c16 	blt	r4,zero,23d4 <__divsi3+0x44>
    23a4:	000d883a 	mov	r6,zero
    23a8:	28000e16 	blt	r5,zero,23e4 <__divsi3+0x54>
    23ac:	00023140 	call	2314 <udivmodsi4>
    23b0:	1007883a 	mov	r3,r2
    23b4:	8005003a 	cmpeq	r2,r16,zero
    23b8:	1000011e 	bne	r2,zero,23c0 <__divsi3+0x30>
    23bc:	00c7c83a 	sub	r3,zero,r3
    23c0:	1805883a 	mov	r2,r3
    23c4:	dfc00117 	ldw	ra,4(sp)
    23c8:	dc000017 	ldw	r16,0(sp)
    23cc:	dec00204 	addi	sp,sp,8
    23d0:	f800283a 	ret
    23d4:	0109c83a 	sub	r4,zero,r4
    23d8:	04000044 	movi	r16,1
    23dc:	000d883a 	mov	r6,zero
    23e0:	283ff20e 	bge	r5,zero,23ac <__divsi3+0x1c>
    23e4:	014bc83a 	sub	r5,zero,r5
    23e8:	8021003a 	cmpeq	r16,r16,zero
    23ec:	003fef06 	br	23ac <__divsi3+0x1c>

000023f0 <__modsi3>:
    23f0:	deffff04 	addi	sp,sp,-4
    23f4:	dfc00015 	stw	ra,0(sp)
    23f8:	01800044 	movi	r6,1
    23fc:	2807883a 	mov	r3,r5
    2400:	20000416 	blt	r4,zero,2414 <__modsi3+0x24>
    2404:	28000c16 	blt	r5,zero,2438 <__modsi3+0x48>
    2408:	dfc00017 	ldw	ra,0(sp)
    240c:	dec00104 	addi	sp,sp,4
    2410:	00023141 	jmpi	2314 <udivmodsi4>
    2414:	0109c83a 	sub	r4,zero,r4
    2418:	28000b16 	blt	r5,zero,2448 <__modsi3+0x58>
    241c:	180b883a 	mov	r5,r3
    2420:	01800044 	movi	r6,1
    2424:	00023140 	call	2314 <udivmodsi4>
    2428:	0085c83a 	sub	r2,zero,r2
    242c:	dfc00017 	ldw	ra,0(sp)
    2430:	dec00104 	addi	sp,sp,4
    2434:	f800283a 	ret
    2438:	014bc83a 	sub	r5,zero,r5
    243c:	dfc00017 	ldw	ra,0(sp)
    2440:	dec00104 	addi	sp,sp,4
    2444:	00023141 	jmpi	2314 <udivmodsi4>
    2448:	0147c83a 	sub	r3,zero,r5
    244c:	003ff306 	br	241c <__modsi3+0x2c>

00002450 <__udivsi3>:
    2450:	000d883a 	mov	r6,zero
    2454:	00023141 	jmpi	2314 <udivmodsi4>

00002458 <__umodsi3>:
    2458:	01800044 	movi	r6,1
    245c:	00023141 	jmpi	2314 <udivmodsi4>

00002460 <__mulsi3>:
    2460:	20000a26 	beq	r4,zero,248c <__mulsi3+0x2c>
    2464:	0007883a 	mov	r3,zero
    2468:	2080004c 	andi	r2,r4,1
    246c:	1005003a 	cmpeq	r2,r2,zero
    2470:	2008d07a 	srli	r4,r4,1
    2474:	1000011e 	bne	r2,zero,247c <__mulsi3+0x1c>
    2478:	1947883a 	add	r3,r3,r5
    247c:	294b883a 	add	r5,r5,r5
    2480:	203ff91e 	bne	r4,zero,2468 <__mulsi3+0x8>
    2484:	1805883a 	mov	r2,r3
    2488:	f800283a 	ret
    248c:	0007883a 	mov	r3,zero
    2490:	1805883a 	mov	r2,r3
    2494:	f800283a 	ret

00002498 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2498:	2900051e 	bne	r5,r4,24b0 <alt_load_section+0x18>
    249c:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    24a0:	20800017 	ldw	r2,0(r4)
    24a4:	21000104 	addi	r4,r4,4
    24a8:	28800015 	stw	r2,0(r5)
    24ac:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    24b0:	29bffb1e 	bne	r5,r6,24a0 <alt_load_section+0x8>
    24b4:	f800283a 	ret

000024b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    24b8:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    24bc:	01000034 	movhi	r4,0
    24c0:	2109e104 	addi	r4,r4,10116
    24c4:	01400034 	movhi	r5,0
    24c8:	2949da04 	addi	r5,r5,10088
    24cc:	01800034 	movhi	r6,0
    24d0:	3189e104 	addi	r6,r6,10116
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    24d4:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    24d8:	00024980 	call	2498 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    24dc:	01000034 	movhi	r4,0
    24e0:	21080804 	addi	r4,r4,8224
    24e4:	01400034 	movhi	r5,0
    24e8:	29480804 	addi	r5,r5,8224
    24ec:	01800034 	movhi	r6,0
    24f0:	31880804 	addi	r6,r6,8224
    24f4:	00024980 	call	2498 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    24f8:	01000034 	movhi	r4,0
    24fc:	2109d304 	addi	r4,r4,10060
    2500:	01400034 	movhi	r5,0
    2504:	2949d304 	addi	r5,r5,10060
    2508:	01800034 	movhi	r6,0
    250c:	3189da04 	addi	r6,r6,10088
    2510:	00024980 	call	2498 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2514:	000273c0 	call	273c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2518:	dfc00017 	ldw	ra,0(sp)
    251c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2520:	00027401 	jmpi	2740 <alt_icache_flush_all>

00002524 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2524:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2528:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    252c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2530:	00026e80 	call	26e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2534:	00026e40 	call	26e4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2538:	d1201017 	ldw	r4,-32704(gp)
    253c:	d1601117 	ldw	r5,-32700(gp)
    2540:	d1a01217 	ldw	r6,-32696(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2544:	dfc00017 	ldw	ra,0(sp)
    2548:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    254c:	000210c1 	jmpi	210c <main>

00002550 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2550:	defff804 	addi	sp,sp,-32
    2554:	dfc00415 	stw	ra,16(sp)
    2558:	dc800315 	stw	r18,12(sp)
    255c:	dc400215 	stw	r17,8(sp)
    2560:	dc000115 	stw	r16,4(sp)
    2564:	d9400515 	stw	r5,20(sp)
    2568:	d9800615 	stw	r6,24(sp)
    256c:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    2570:	d8800504 	addi	r2,sp,20
    2574:	2025883a 	mov	r18,r4
    2578:	d8800015 	stw	r2,0(sp)
    257c:	00003d06 	br	2674 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2580:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2584:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2588:	18800226 	beq	r3,r2,2594 <alt_printf+0x44>
        {
            alt_putchar(c);
    258c:	1809883a 	mov	r4,r3
    2590:	00000a06 	br	25bc <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2594:	91000007 	ldb	r4,0(r18)
    2598:	94800044 	addi	r18,r18,1
    259c:	20003726 	beq	r4,zero,267c <alt_printf+0x12c>
            {
                if (c == '%')
    25a0:	20c00626 	beq	r4,r3,25bc <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    25a4:	008018c4 	movi	r2,99
    25a8:	2080061e 	bne	r4,r2,25c4 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    25ac:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    25b0:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    25b4:	10800104 	addi	r2,r2,4
    25b8:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    25bc:	00026940 	call	2694 <alt_putchar>
    25c0:	00002c06 	br	2674 <alt_printf+0x124>
                }
                else if (c == 'x')
    25c4:	00801e04 	movi	r2,120
    25c8:	20801e1e 	bne	r4,r2,2644 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    25cc:	d8800017 	ldw	r2,0(sp)
    25d0:	14400017 	ldw	r17,0(r2)
    25d4:	10800104 	addi	r2,r2,4
    25d8:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    25dc:	88000226 	beq	r17,zero,25e8 <alt_printf+0x98>
    25e0:	04000704 	movi	r16,28
    25e4:	00000306 	br	25f4 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    25e8:	01000c04 	movi	r4,48
    25ec:	003ff306 	br	25bc <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    25f0:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    25f4:	008003c4 	movi	r2,15
    25f8:	1404983a 	sll	r2,r2,r16
    25fc:	8884703a 	and	r2,r17,r2
    2600:	103ffb26 	beq	r2,zero,25f0 <alt_printf+0xa0>
    2604:	00000b06 	br	2634 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2608:	8884703a 	and	r2,r17,r2
    260c:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    2610:	00800244 	movi	r2,9
                            c = '0' + digit;
    2614:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    2618:	10c0012e 	bgeu	r2,r3,2620 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    261c:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    2620:	21003fcc 	andi	r4,r4,255
    2624:	2100201c 	xori	r4,r4,128
    2628:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    262c:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    2630:	00026940 	call	2694 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2634:	008003c4 	movi	r2,15
    2638:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    263c:	803ff20e 	bge	r16,zero,2608 <alt_printf+0xb8>
    2640:	00000c06 	br	2674 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2644:	00801cc4 	movi	r2,115
    2648:	20800a1e 	bne	r4,r2,2674 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    264c:	d8800017 	ldw	r2,0(sp)
    2650:	14000017 	ldw	r16,0(r2)
    2654:	10800104 	addi	r2,r2,4
    2658:	d8800015 	stw	r2,0(sp)
    265c:	00000106 	br	2664 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    2660:	00026940 	call	2694 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2664:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    2668:	84000044 	addi	r16,r16,1
    266c:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2670:	103ffb1e 	bne	r2,zero,2660 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2674:	90c00007 	ldb	r3,0(r18)
    2678:	183fc11e 	bne	r3,zero,2580 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    267c:	dfc00417 	ldw	ra,16(sp)
    2680:	dc800317 	ldw	r18,12(sp)
    2684:	dc400217 	ldw	r17,8(sp)
    2688:	dc000117 	ldw	r16,4(sp)
    268c:	dec00804 	addi	sp,sp,32
    2690:	f800283a 	ret

00002694 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2694:	defffd04 	addi	sp,sp,-12
    2698:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    269c:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    26a0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    26a4:	01800044 	movi	r6,1
    26a8:	01000034 	movhi	r4,0
    26ac:	2109e004 	addi	r4,r4,10112
    26b0:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    26b4:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    26b8:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    26bc:	00027080 	call	2708 <altera_avalon_jtag_uart_write>
    26c0:	1009883a 	mov	r4,r2
    26c4:	00bfffc4 	movi	r2,-1
    26c8:	2080011e 	bne	r4,r2,26d0 <alt_putchar+0x3c>
    26cc:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    26d0:	8005883a 	mov	r2,r16
    26d4:	dfc00217 	ldw	ra,8(sp)
    26d8:	dc000117 	ldw	r16,4(sp)
    26dc:	dec00304 	addi	sp,sp,12
    26e0:	f800283a 	ret

000026e4 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    26e4:	f800283a 	ret

000026e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    26e8:	deffff04 	addi	sp,sp,-4
    26ec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    26f0:	00027440 	call	2744 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    26f4:	00800044 	movi	r2,1
    26f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    26fc:	dfc00017 	ldw	ra,0(sp)
    2700:	dec00104 	addi	sp,sp,4
    2704:	f800283a 	ret

00002708 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2708:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    270c:	298f883a 	add	r7,r5,r6
    2710:	20c00104 	addi	r3,r4,4
    2714:	00000606 	br	2730 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2718:	18800037 	ldwio	r2,0(r3)
    271c:	10bfffec 	andhi	r2,r2,65535
    2720:	10000326 	beq	r2,zero,2730 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2724:	28800007 	ldb	r2,0(r5)
    2728:	29400044 	addi	r5,r5,1
    272c:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2730:	29fff936 	bltu	r5,r7,2718 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    2734:	3005883a 	mov	r2,r6
    2738:	f800283a 	ret

0000273c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    273c:	f800283a 	ret

00002740 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2740:	f800283a 	ret

00002744 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2744:	000170fa 	wrctl	ienable,zero
}
    2748:	f800283a 	ret
