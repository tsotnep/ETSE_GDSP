/*****************************************************************************
* Filename:          C:\FPGA\AXI4\Virtex6_ML605_MUL_IP_CORE/drivers/matrix_mul_ip_core_v1_00_a/src/matrix_mul_ip_core_selftest.c
* Version:           1.00.a
* Description:       Contains a diagnostic self-test function for the matrix_mul_ip_core driver
* Date:              Wed Aug 05 15:25:43 2015 (by Create and Import Peripheral Wizard)
*****************************************************************************/


/***************************** Include Files *******************************/

#include "matrix_mul_ip_core_s_int_g.h"
#include "stdio.h"
#include "xio.h"
#include "xparameters.h"


/************************** Constant Definitions ***************************/

#define READ_WRITE_MUL_FACTOR 0x10
#define MATRIX_MUL_IP_CORE_SELFTEST_BUFSIZE  4 /* Size of buffer (n bytes) is fixed to 4 for lite Master */
#define MATRIX_MUL_IP_CORE_USER_NUM_REG  2/* Number of registers in slave */

/************************** Variable Definitions ****************************/

//static Xuint8 __attribute__((aligned (128))) SrcBuffer[MATRIX_MUL_IP_CORE_SELFTEST_BUFSIZE];   /* Source buffer      */
//static Xuint8 __attribute__((aligned (128))) DstBuffer[MATRIX_MUL_IP_CORE_SELFTEST_BUFSIZE];   /* Destination buffer */

/************************** Function Definitions ***************************/
void delay(int cycles);
mul_ip_core_status_flags_t ReadMulIpCoreStatusFlags(void);
int WriteMulIPCoreStatus(mul_ip_core_config_t config);
mul_ip_core_config_t ReadMulIpCoreConfigFlags(void);
Xuint32 ReadMulIPCoreFlagsAndData(void);

/**************************************************************************/

/********************************Constants********************************/


/**************************************************************************/
/**
 *
 * Run a self-test on the driver/device. Note this may be a destructive test if
 * resets of the device are performed.
 *
 * If the hardware system is not built correctly, this function may never
 * return to the caller.
 *
 * @param   baseaddr_p is the base address of the MATRIX_MUL_IP_CORE instance to be worked on.
 *
 * @return
 *
 *    - XST_SUCCESS   if all self-test code passed
 *    - XST_FAILURE   if any self-test code failed
 *
 * @note    Caching must be turned off for this function to work.
 * @note    Self test may fail if data memory and device are not on the same bus.
 *
 */
XStatus MATRIX_MUL_IP_CORE_SelfTest(void * baseaddr_p)
{

  mul_ip_core_status_flags_t statusValue1;
  mul_ip_core_status_flags_t statusValue2;
  mul_ip_core_config_t mul_ip_write_handle;
  mul_ip_core_config_t configValue1;
  mul_ip_core_config_t configValue2;
  Xuint32 DataOutputArray[16];

  int i;


  xil_printf("******************************\n\r");
  xil_printf("* matrix_mul_ip_core_s_int_g Self Test\n\r");
  xil_printf("******************************\n\n\r");

  /*
   * Write to user logic slave module register(s) and read back
   */
  xil_printf("LOAD BRAM test...\n\n\r");

  mul_ip_write_handle.RST = 1;
  mul_ip_write_handle.LOAD_PG = LOAD_P;
  mul_ip_write_handle.UNLOAD = 0;
  mul_ip_write_handle.P = 0;
  mul_ip_write_handle.G = 0;
  mul_ip_write_handle.Bank_sel_in = 0;
  WriteMulIPCoreStatus(mul_ip_write_handle);
  configValue1 = ReadMulIpCoreConfigFlags();
  xil_printf("IP Core Config1:\n\r");
  xil_printf("RST = %d, Bank = %d, LOAD_PG = %d, UNLOAD = %d, P = %d, G = %d\n\n\r",configValue1.RST,configValue1.Bank_sel_in,configValue1.LOAD_PG,configValue1.UNLOAD,configValue1.P,configValue1.G);
  statusValue1 = ReadMulIpCoreStatusFlags();
  xil_printf("IP Core Status:\n\r");
  xil_printf("READY = %d, LOADING_DONE = %d, OPDONE = %d, UN_LOADING_DONE = %d\n\n\r",statusValue1.READY,statusValue1.LOADING_DONE,statusValue1.OP_DONE,statusValue1.UN_LOADING_DONE);

  delay(3);
  mul_ip_write_handle.RST = 0;
  WriteMulIPCoreStatus(mul_ip_write_handle);
  configValue2 = ReadMulIpCoreConfigFlags();

   xil_printf("IP Core Config2:\n\r");
   xil_printf("RST = %d, Bank = %d, LOAD_PG = %d, UNLOAD = %d, P = %d, G = %d\n\n\r",configValue2.RST,configValue2.Bank_sel_in,configValue2.LOAD_PG,configValue2.UNLOAD,configValue2.P,configValue2.G);
   statusValue2 = ReadMulIpCoreStatusFlags();
   xil_printf("IP Core Status1:\n\r");
   xil_printf("READY = %d, LOADING_DONE = %d, OPDONE = %d, UN_LOADING_DONE = %d\n\n\r",statusValue2.READY,statusValue2.LOADING_DONE,statusValue2.OP_DONE,statusValue2.UN_LOADING_DONE);


    while (statusValue1.READY == 0)
    {
  	  statusValue1 = ReadMulIpCoreStatusFlags();
    }

    xil_printf("IP Core has asserted READY signal\n\r");
    xil_printf("READY = %d, LOADING_DONE = %d, OPDONE = %d, UN_LOADING_DONE = %d\n\n\r",statusValue1.READY,statusValue1.LOADING_DONE,statusValue1.OP_DONE,statusValue1.UN_LOADING_DONE);

    xil_printf("Writing data to BRAM\n\n\r");
    mul_ip_write_handle.RST = 0;
    for (i=1;i<17;i++)
    {
    	matrix_mul_ip_core_s_int_g_mWriteReg(_baseAddress,matrix_mul_ip_core_s_int_g_SLV_REG2_OFFSET, i);
    }

    //xil_printf("Finished writing data to GRAM\n\n\r");

    while (statusValue2.LOADING_DONE == 0)
      {
    	  statusValue2 = ReadMulIpCoreStatusFlags();
      }

    xil_printf("IP Core has asserted LOADING_DONE signal\n\r");
    xil_printf("READY = %d, LOADING_DONE = %d, OPDONE = %d, UN_LOADING_DONE = %d\n\n\r",statusValue2.READY,statusValue2.LOADING_DONE,statusValue2.OP_DONE,statusValue2.UN_LOADING_DONE);

    /*************************************************************************************************************************************************************************************/

      xil_printf("UN-LOAD BRAM test...\n\n\r");



      	  mul_ip_write_handle.LOAD_PG = NO_LOAD_PG;
      	  mul_ip_write_handle.UNLOAD = 1;
        WriteMulIPCoreStatus(mul_ip_write_handle);
        configValue1 = ReadMulIpCoreConfigFlags();
//        xil_printf("IP Core Config1:\n\r");
//        xil_printf("RST = %d, Bank = %d, LOAD_PG = %d, UNLOAD = %d, P = %d, G = %d\n\n\r",configValue1.RST,configValue1.Bank_sel_in,configValue1.LOAD_PG,configValue1.UNLOAD,configValue1.P,configValue1.G);

        while (statusValue1.READY == 0)
        {
      	  statusValue1 = ReadMulIpCoreStatusFlags();
        }

        xil_printf("IP Core has asserted READY signal\n\r");
        xil_printf("READY = %d, LOADING_DONE = %d, OPDONE = %d, UN_LOADING_DONE = %d\n\n\r",statusValue1.READY,statusValue1.LOADING_DONE,statusValue1.OP_DONE,statusValue1.UN_LOADING_DONE);

        xil_printf("Reading data from BRAM\n\n\r");

		i=0;
		while(ReadMulIpCoreStatusFlags().UN_LOADING_DONE == 0)
		  {
				DataOutputArray[i] = get_matrix_mul_output_data();
				i++;
		  }

       //xil_printf("Finished reading data from BRAM\n\n\r");

        while (statusValue2.UN_LOADING_DONE == 0)
          {
        	  statusValue2 = ReadMulIpCoreStatusFlags();
          }

        xil_printf("IP Core has asserted UN_LOADING_DONE signal\n\r");
        xil_printf("READY = %d, LOADING_DONE = %d, OPDONE = %d, UN_LOADING_DONE = %d\n\n\r",statusValue2.READY,statusValue2.LOADING_DONE,statusValue2.OP_DONE,statusValue2.UN_LOADING_DONE);

        xil_printf("Data read out of IP Core : \n\n\r");
        xil_printf("%d  %d  %d  %d\n\r",DataOutputArray[3],DataOutputArray[2],DataOutputArray[1],DataOutputArray[0]);
        xil_printf("%d  %d  %d  %d\n\r",DataOutputArray[7],DataOutputArray[6],DataOutputArray[5],DataOutputArray[4]);
        xil_printf("%d  %d  %d  %d\n\r",DataOutputArray[11],DataOutputArray[10],DataOutputArray[9],DataOutputArray[8]);
        xil_printf("%d  %d  %d  %d\n\r",DataOutputArray[15],DataOutputArray[14],DataOutputArray[13],DataOutputArray[12]);

  return XST_SUCCESS;
}

void delay(int cycles)
{
	int i = 0;
	for (i=0;i<cycles;i++);
}


Xuint32 ReadMulIPCoreFlagsAndData(void)
{

	Xuint32 temp = get_matrix_mul_output_data();
	return temp & 0x0003ffff;
}

mul_ip_core_status_flags_t ReadMulIpCoreStatusFlags(void)
{
	mul_ip_core_status_flags_t flags;
	Xuint8 temp = get_matrix_mul_status_flags();
	//Xuint8 temp2;
//	flags.LOADING_DONE = temp2= (temp & LOADING_DONE_Msk)>>4;
//	flags.READY = temp2 = (temp & READY_Msk) >> 2;
//	flags.OP_DONE = temp2 = (temp & OP_DONE_Msk) >>3;
//	flags.UN_LOADING_DONE = temp2 = (temp & UN_LOADING_DONE_Msk)>>5;

	flags.LOADING_DONE =  (temp & LOADING_DONE_Msk)==LOADING_DONE_Msk;
	flags.READY = (temp & READY_Msk)==READY_Msk;
	flags.OP_DONE = (temp & OP_DONE_Msk)==OP_DONE_Msk;
	flags.UN_LOADING_DONE = (temp & UN_LOADING_DONE_Msk)==UN_LOADING_DONE_Msk;

	return flags;
}

mul_ip_core_config_t ReadMulIpCoreConfigFlags(void)
{
	mul_ip_core_config_t flags;
	Xuint32 temp2 = get_matrix_mul_config_flags();

	flags.Bank_sel_in =  (temp2 & Bank_sel_in_Msk)==Bank_sel_in_Msk;
	flags.LOAD_PG = (temp2 & LOAD_PG_Msk)>>LOAD_PG_Pos;
	flags.RST = (temp2 & RST_Msk)==RST_Msk;
	flags.UNLOAD = (temp2 & UNLOAD_Msk)==UNLOAD_Msk;
	flags.P		= (temp2 & P_Msk)==P_Msk;
	flags.G		= (temp2 & G_Msk)==G_Msk;

	return flags;
}

int WriteMulIPCoreStatus(mul_ip_core_config_t config)
{
	Xuint32 data = 0;


//	data ^= (-config.RST^data) & (1 << RST_Pos);
//	data ^= (-config.UNLOAD^data) & (1 << UNLOAD_Pos);
//	data ^= (-config.Bank_sel_in^data) & (1<< Bank_sel_in_Pos);
//	data ^= (-config.P^data) & (1 << P_Pos);
//	data ^= (-config.G^data) & (1 << G_Pos);
//	data ^= (-config.LOAD_PG^data) & (3 << LOAD_PG_Pos);

	//data |= config.DIN;
	if (config.RST == 1) data |= 0x00000001;
	else data |= 0x00000002;

	if (config.LOAD_PG==0) data &= ~(3 << LOAD_PG_Pos);
	else data |= (config.LOAD_PG << LOAD_PG_Pos);

	if(config.UNLOAD==1) data |= (config.UNLOAD << UNLOAD_Pos);
	else data &= ~(1 << UNLOAD_Pos);

	if(config.Bank_sel_in==1) data |= (config.Bank_sel_in << Bank_sel_in_Pos);
	else data &= ~(1 << Bank_sel_in_Pos);

	if(config.P==1) data |= (config.P << P_Pos);
	else data &= ~(1 << P_Pos);

	if(config.G==1) data |= (config.G << G_Pos);
	else data &= ~(1 << G_Pos);

	matrix_mul_ip_core_s_int_g_mWriteReg(_baseAddress,matrix_mul_ip_core_s_int_g_SLV_REG0_OFFSET, data);
	return 0;
}
